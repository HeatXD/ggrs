<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>GGRS</title>
	<subtitle>GGRS is a reimagination of the GGPO network SDK written in 100% safe Rust.</subtitle>
	<link href="https://gschup.github.io/ggrs/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://gschup.github.io/ggrs/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-09-13T00:00:00+00:00</updated>
	<id>https://gschup.github.io/ggrs/atom.xml</id>
	<entry xml:lang="en">
		<title>Main Loop</title>
		<published>2021-09-13T00:00:00+00:00</published>
		<updated>2021-09-13T00:00:00+00:00</updated>
		<link href="https://gschup.github.io/ggrs/docs/tutorial/main-loop/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/docs/tutorial/main-loop/</id>
		<content type="html">&lt;p&gt;In your main game loop, you should call &lt;code&gt;advance_frame(...)&lt;&#x2F;code&gt; in fixed intervals. How to do that exactly depends heavily on your software stack. You can also check out ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@tglaiel&#x2F;how-to-make-your-game-run-at-60fps-24c61210fe75&quot;&gt;this article&lt;&#x2F;a&gt; or ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;gafferongames.com&#x2F;post&#x2F;fix_your_timestep&#x2F;&quot;&gt;this article&lt;&#x2F;a&gt; to learn more about running your own gameloop.&lt;&#x2F;p&gt;
&lt;p&gt;For full code examples, take a look at:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;ggrs&#x2F;tree&#x2F;main&#x2F;examples&#x2F;box_game&#x2F;box_game_p2p.rs&quot;&gt;BoxGame P2P&lt;&#x2F;a&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;ggrs&#x2F;tree&#x2F;main&#x2F;examples&#x2F;box_game&#x2F;box_game_spectator.rs&quot;&gt;BoxGame Spectator&lt;&#x2F;a&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;ggrs&#x2F;tree&#x2F;main&#x2F;examples&#x2F;box_game&#x2F;box_game_synctest.rs&quot;&gt;BoxGame SyncTest&lt;&#x2F;a&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;bevy_ggrs&#x2F;tree&#x2F;main&#x2F;examples&#x2F;box_game&quot;&gt;Bevy variants&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;polling-remote-clients&quot;&gt;Polling Remote Clients&lt;&#x2F;h2&gt;
&lt;p&gt;If you have spare time between rendering and updating your game, you can always call:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;poll_remote_clients&lt;&#x2F;span&gt;&lt;span&gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will receive and handle incoming UDP packets and send queued packets to other remote clients. GGRS should work without explicitly calling this method, but frequent polling leads to timely communication between sessions.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Requests and Events</title>
		<published>2021-09-13T00:00:00+00:00</published>
		<updated>2021-09-13T00:00:00+00:00</updated>
		<link href="https://gschup.github.io/ggrs/docs/tutorial/requests-events/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/docs/tutorial/requests-events/</id>
		<content type="html">&lt;h2 id=&quot;handling-requests&quot;&gt;Handling Requests&lt;&#x2F;h2&gt;
&lt;p&gt;If calling &lt;code&gt;advance_frame(...)&lt;&#x2F;code&gt; succeeds, GGRS will return a &lt;code&gt;Vec&amp;lt;GGRSRequest&amp;gt;&lt;&#x2F;code&gt;. Handling requests is mandatory. This sequence of requests is order-sensitive! You need to fulfill all requests in order. There are three types of requests: AdvanceFrame, LoadGameState and SaveGameState. Please see ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;ggrs&#x2F;tree&#x2F;main&#x2F;examples&#x2F;box_game&#x2F;box_game.rs&quot;&gt;BoxGame&lt;&#x2F;a&gt; for a full code example.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;advanceframe&quot;&gt;AdvanceFrame&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;AdvanceFrame { inputs: Vec&amp;lt;GameInput&amp;gt; }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Advance the frame with the provided inputs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;loadgamestate&quot;&gt;LoadGameState&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;LoadGameState { cell: GameStateCell }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Load a previous gamestate by calling &lt;code&gt;your_state = cell.load()&lt;&#x2F;code&gt;. The provided &lt;code&gt;frame&lt;&#x2F;code&gt; defines from which frame this gamestate is from.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;savegamestate&quot;&gt;SaveGameState&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;SaveGameState { cell: GameStateCell, frame: Frame }&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Save the current gamestate by calling &lt;code&gt;cell.save(your_state)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;handling-events&quot;&gt;Handling Events&lt;&#x2F;h2&gt;
&lt;p&gt;Events are notifications from the session for the user. It is recommended to fetch events after every update. Most events are simply of informative nature, requiring no special action from the user. Please see the examples or refer to the documentation what kind of &lt;code&gt;GGRSEvent&lt;&#x2F;code&gt; can occur.&lt;&#x2F;p&gt;
&lt;p&gt;One exception to this is the &lt;code&gt;WaitRecommendation&lt;&#x2F;code&gt; event, which GGRS gives out when your local clients runs too far ahead of remote clients, leading to a lot of one-sided rollbacks on your end. A simple way to mitigate this discrepancy by skipping the indicated amount of frames. More elaborate means to synchronize the clients are described ðŸ‘‰&lt;a href=&quot;..&#x2F;time_sync&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Sessions</title>
		<published>2021-09-13T00:00:00+00:00</published>
		<updated>2021-09-13T00:00:00+00:00</updated>
		<link href="https://gschup.github.io/ggrs/docs/tutorial/sessions/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/docs/tutorial/sessions/</id>
		<content type="html">&lt;p&gt;GGRS mainly operates through one of three sessions; each providing different functionalities:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;P2PSession&lt;&#x2F;code&gt;: Communicate with other remote sessions; send and receive inputs to synchronize your game between clients. All Clients participating in the game create their own session and connect to each other in a peer-to-peer fashion.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;P2PSpectatorSession&lt;&#x2F;code&gt;: Connects to another &lt;code&gt;P2PSession&lt;&#x2F;code&gt; in order to receive confirmed game inputs without contributing to the game input itself. If you want clients to spectate games, this is the session to use.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SyncTestSession&lt;&#x2F;code&gt;: Used mainly for debugging purposes, this session simulates a configurable amount of rollbacks each frame. This is a great way to test if your game updates deterministically. The &lt;code&gt;SyncTestSession&lt;&#x2F;code&gt; will compare checksums between original and resimulated gamestates and raise an error if something went wrong.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;&#x2F;h2&gt;
&lt;p&gt;For all sessions, you will have to define the number of active players contributing to the game input via &lt;code&gt;num_players&lt;&#x2F;code&gt; as well as the size of such inputs via &lt;code&gt;input_size&lt;&#x2F;code&gt;. The &lt;code&gt;local_port&lt;&#x2F;code&gt; is where your client will receive packets of remote clients.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;p2psession&quot;&gt;P2PSession&lt;&#x2F;h2&gt;
&lt;p&gt;A P2PSession communicates with other P2PSessions and P2PSpectatorSessions. They send and receive inputs to synchronize your game between clients. All Clients participating in the game create their own session and connect to each other in a peer-to-peer fashion.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; local_port: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7000&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; num_players : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; input_size : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= std::mem::size_of::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; sess = P2PSession::new(num_players, input_size, local_port)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, you should specify the players participating in the game, exactly as many as you defined through &lt;code&gt;num_players&lt;&#x2F;code&gt;. You can add exactly one &lt;code&gt;PlayerType::Local&lt;&#x2F;code&gt;, the rest should be &lt;code&gt;PlayerType::Remote(addr)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; local_handle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; remote_handle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; remote_addr: SocketAddr = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1:7001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;()?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_player&lt;&#x2F;span&gt;&lt;span&gt;(PlayerType::Local, local_handle)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_player&lt;&#x2F;span&gt;&lt;span&gt;(PlayerType::Remote(remote_addr), remote_handle)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Optionally, define any spectators you wish to add. The &lt;code&gt;spectator_handle&lt;&#x2F;code&gt; should be greater or equal to &lt;code&gt;num_players&lt;&#x2F;code&gt;. Internally, GGRS will add 1000 to the provided handle to identify the spectator client, so the resulting internal handle will be 1002 in this example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; spectator_handle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; spec_addr: SocketAddr = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1:7002&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;()?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_player&lt;&#x2F;span&gt;&lt;span&gt;(PlayerType::Spectator(spec_addr), spectator_handle)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can set input delay for the local player. You do not need to do this for remote players.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; desired_delay = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_frame_delay&lt;&#x2F;span&gt;&lt;span&gt;(desired_delay, local_handle)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Per default, GGRS requests to save the gamestate after every update step in order to minimize rollbacks as much as possible. If saving your game state takes much longer than performing multiple update steps, GGRS has an alternative sparse saving mode where instead the amount of save requests are minimized at the cost of some additional state update requests.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_sparse_saving&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, you can start the session. GGRS will then make an effort to establish communication between all clients. Only if the connection to all remotes (including spectators) has been established, the session will be able to advance the gamestate and send inputs.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;start_session&lt;&#x2F;span&gt;&lt;span&gt;()?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;p2pspectatorsession&quot;&gt;P2PSpectatorSession&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;P2PSpectatorSession&lt;&#x2F;code&gt; connects to another &lt;code&gt;P2PSession&lt;&#x2F;code&gt; in order to receive confirmed game inputs without contributing to the game input itself. If you want clients to spectate games, this is the session to use. For the spectator, you will have to define a &lt;code&gt;host_addr&lt;&#x2F;code&gt; from which this session will receive inputs from all players. The defined host needs to add this client as a spectator, as well.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; local_port: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7002&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; num_players : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; input_size : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= std::mem::size_of::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; host_addr: SocketAddr = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1:7000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;()?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; sess = P2PSpectatorSession::new(num_players, input_size, local_port, host_addr)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Optionally, you can change the default catch-up parameters. Setting the catch-up speed to 1 will prevent any catch-up measures.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_max_frames_behind&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)?; &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_catchup_speed&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, you can start the session. GGRS will then make an effort to establish communication to the host. Only then will the session be able to advance the gamestate.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;start_session&lt;&#x2F;span&gt;&lt;span&gt;()?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;synctestsession&quot;&gt;SyncTestSession&lt;&#x2F;h2&gt;
&lt;p&gt;Used mainly for debugging purposes, this session simulates a configurable amount of rollbacks each frame. This is a great way to test if your game updates deterministically. The &lt;code&gt;SyncTestSession&lt;&#x2F;code&gt; will compare checksums between original and resimulated gamestates and raise an error if something went wrong. &lt;code&gt;check_distance&lt;&#x2F;code&gt; specifies how many frames of rollback you want to induce every frame. This value cannot exceed the maximum predicition frames allowed. Currently, 7 is the maximum distance of rollback that can occur.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; check_distance : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; num_players : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; input_size : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= std::mem::size_of::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; sess = SyncTestSession::new(num_players, input_size, check_distance)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Afterwards, you can optionally define input delays for any player you wish.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; input_delay = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_frame_delay&lt;&#x2F;span&gt;&lt;span&gt;(input_delay, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_frame_delay&lt;&#x2F;span&gt;&lt;span&gt;(input_delay, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You don&#x27;t need to define players or start the session. Because there are no remote clients to synchronize with, a &lt;code&gt;SyncTestSession&lt;&#x2F;code&gt; will immediately be ready to advance the game.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Time Synchronization</title>
		<published>2021-09-13T00:00:00+00:00</published>
		<updated>2021-09-13T00:00:00+00:00</updated>
		<link href="https://gschup.github.io/ggrs/docs/tutorial/time-sync/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/docs/tutorial/time-sync/</id>
		<content type="html">&lt;p&gt;TODO.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introducing: Bevy_GGRS</title>
		<published>2021-08-06T12:00:00+00:00</published>
		<updated>2021-08-06T12:00:00+00:00</updated>
		<link href="https://gschup.github.io/ggrs/blog/bevy-plugin/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/blog/bevy-plugin/</id>
		<content type="html">&lt;p&gt;The plugin is currently being developed and is available on ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;bevy_ggrs&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introducing: Sparse Saving Feature</title>
		<published>2021-08-06T12:00:00+00:00</published>
		<updated>2021-08-06T12:00:00+00:00</updated>
		<link href="https://gschup.github.io/ggrs/blog/sparse-saving/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/blog/sparse-saving/</id>
		<content type="html">&lt;p&gt;GGRS just released version &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;ggrs&#x2F;releases&#x2F;tag&#x2F;v0.4.1&quot;&gt;0.4.1&lt;&#x2F;a&gt; and with it comes the sparse saving feature. In this article, I am going to briefly explain what it does and if you should consider using it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-things-were-before&quot;&gt;How things were before&lt;&#x2F;h2&gt;
&lt;p&gt;If you were using GGRS before 0.4.1, updating, loading and saving the game state would occur exactly as often as they would in GGPO. Loading is done once per rollback, but saving is done after every update step. This is how a rollback looks like in GGPO:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[LOAD]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[UPDATE]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[SAVE]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[UPDATE]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[SAVE]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[UPDATE]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[SAVE]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By keeping a full history of gamestates, GGPO can always load the most recent and correct state. You could say that &lt;strong&gt;GGPO minimizes &lt;em&gt;update steps&lt;&#x2F;em&gt;.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;saving-and-loading-game-state&quot;&gt;Saving and Loading Game State&lt;&#x2F;h2&gt;
&lt;p&gt;Depending on your application, saving and loading the game state can look wildly different, but one often used technique is serialization, for example with Rust&#x27;s popular &lt;a href=&quot;https:&#x2F;&#x2F;serde.rs&#x2F;&quot;&gt;serde&lt;&#x2F;a&gt;. In fact, GGRS&#x27;s own examples use &lt;code&gt;serde&lt;&#x2F;code&gt; and &lt;code&gt;bincode&lt;&#x2F;code&gt; in order to save and load the gamestate. While very convenient, this usually results in long computation times when saving multiple times in a single step, as in a rollback shown above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sparse-saving-mode&quot;&gt;Sparse Saving Mode&lt;&#x2F;h2&gt;
&lt;p&gt;As a solution, GGRS offers a &lt;em&gt;sparse saving&lt;&#x2F;em&gt; mode for &lt;code&gt;P2PSession&lt;&#x2F;code&gt;. It is easily enabled before starting the session.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;sess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_sparse_saving&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)?;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it. You don&#x27;t need to change anything else in your code. &lt;strong&gt;When in sparse saving mode, GGRS minimizes &lt;em&gt;save requests&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; at the cost of additional update steps.&lt;&#x2F;p&gt;
&lt;p&gt;This works by only ever saving the latest confirmed frame, for which we have received and confirmed input from all clients. This state is guaranteed to be correct and can be used as a loading point for every rollback. If no &lt;em&gt;natural&lt;&#x2F;em&gt; rollbacks occur (due to all predictions being correct or all inputs arriving on time), we sometimes might need to artificially induce a rollback in order to resimulate the last confirmed state and save it.&lt;&#x2F;p&gt;
&lt;p&gt;With sparse saving, GGRS guarantees to save at most once per update tick, at the cost of potentially longer rollback sequences. In the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;ggrs&#x2F;tree&#x2F;main&#x2F;examples&#x2F;rapier&quot;&gt;Rapier Synctest Example&lt;&#x2F;a&gt;, a single update step costs less than 0.5ms, while saving costs up to 3ms of time (due to the whole physics pipeline being serialized, which is definitely not optimal). In a hypothetical P2P example, this disparity makes the rapier example a prime candidate for the sparse saving feature.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Depending on your application, the sparse saving mode might be beneficial for you. Update GGRS to the latest version 0.4.1, enable &lt;em&gt;sparse saving&lt;&#x2F;em&gt; and give it a try! If it made any difference for you, let me know!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Hello World</title>
		<published>2021-08-04T19:17:23+00:00</published>
		<updated>2021-08-04T19:17:23+00:00</updated>
		<link href="https://gschup.github.io/ggrs/blog/hello-world/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/blog/hello-world/</id>
		<content type="html"></content>
	</entry>
	<entry xml:lang="en">
		<title>FAQ</title>
		<published>2021-08-04T19:17:23+00:00</published>
		<updated>2021-08-04T19:17:23+00:00</updated>
		<link href="https://gschup.github.io/ggrs/docs/help/faq/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/docs/help/faq/</id>
		<content type="html">&lt;h2 id=&quot;what-is-ggrs&quot;&gt;What is GGRS?&lt;&#x2F;h2&gt;
&lt;p&gt;GGRS (Good Game Rollback System) is a reimagination of the ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;www.ggpo.net&#x2F;&quot;&gt;GGPO&lt;&#x2F;a&gt; P2P rollback networking library written in 100% safe Rust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-ggpo-rollback&quot;&gt;What is GGPO &#x2F; Rollback?&lt;&#x2F;h2&gt;
&lt;p&gt;Taken from ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;ggpo.net&#x2F;&quot;&gt;the official GGPO website&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rollback networking is designed to be integrated into a fully deterministic peer-to-peer engine.  With full determinism, the game is guaranteed to play out the same way on all players computers if we simply feed them the same inputs.  One way to achieve this is to exchange inputs for all players over the network, only execution a frame of gameplay logic when all players have received all the inputs from their peers.  This often results in sluggish, unresponsive gameplay.  The longer it takes to get inputs over the network, the slower the game becomes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In rollback networking, game logic is allowed to proceed with just the inputs from the local player.  If the remote inputs have not yet arrived when it&#x27;s time to execute a frame, the networking code will predict what it expects the remote players to do based on previously seen inputs.  Since there&#x27;s no waiting, the game feels just as responsive as it does offline.  When those inputs finally arrive over the network, they can be compared to the ones that were predicted earlier.  If they differ, the game can be re-simulated from the point of divergence to the current visible frame.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&#x27;t worry if that sounds like a headache.  GGPO was designed specifically to implement the rollback algorithms and low-level networking logic in a way that&#x27;s easy to integrate into your existing game loop.  If you simply implement the functionality to save your game state, load it back up, and execute a frame of game state without rendering its outcome, GGPO can take care of the rest.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For more information about GGPO, check out ðŸ‘‰&lt;a href=&quot;http:&#x2F;&#x2F;ggpo.net&#x2F;&quot;&gt;the official website&lt;&#x2F;a&gt; or ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pond3r&#x2F;ggpo&quot;&gt;the official github repository&lt;&#x2F;a&gt;. A very good pseudocode explanation for general rollback networking can be found ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;rcmagic&#x2F;f8d76bca32b5609e85ab156db38387e9&quot;&gt;in this Gist&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;even-more-questions&quot;&gt;Even more questions?&lt;&#x2F;h2&gt;
&lt;p&gt;Send &lt;em&gt;Georg Schuppe&lt;&#x2F;em&gt; an E-mail:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;mailto:georg.schuppe@gmail.com&quot;&gt;georg.schuppe@gmail.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Setup</title>
		<published>2021-08-04T19:17:23+00:00</published>
		<updated>2021-08-04T19:17:23+00:00</updated>
		<link href="https://gschup.github.io/ggrs/docs/tutorial/setup/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/docs/tutorial/setup/</id>
		<content type="html">&lt;p&gt;To start, add GGRS to your dependencies:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[dependencies]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ggrs &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;&#x2F;h2&gt;
&lt;p&gt;GGRS assumes that you have addresses and ports of every client you want to synchronize with. It does not handle NAT traversal nor does does it provide a signalling server. Check out ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;keithjohnston.wordpress.com&#x2F;2014&#x2F;02&#x2F;17&#x2F;nat-punch-through-for-multiplayer-games&#x2F;&quot;&gt;this article&lt;&#x2F;a&gt; or ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;bford.info&#x2F;pub&#x2F;net&#x2F;p2pnat&#x2F;&quot;&gt;this article&lt;&#x2F;a&gt; for more information on the topic.&lt;&#x2F;p&gt;
&lt;p&gt;TODO determinism requirements&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introduction</title>
		<published>2021-05-01T08:00:00+00:00</published>
		<updated>2021-05-01T08:00:00+00:00</updated>
		<link href="https://gschup.github.io/ggrs/docs/getting-started/introduction/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/docs/getting-started/introduction/</id>
		<content type="html">&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;&#x2F;h2&gt;
&lt;p&gt;Tutorial and code snippets on how to start developing with GGRS. ðŸ‘‰&lt;a href=&quot;..&#x2F;..&#x2F;tutorial&#x2F;setup&#x2F;&quot;&gt;Tutorial&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h2&gt;
&lt;p&gt;Find full application examples. ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;ggrs&#x2F;tree&#x2F;main&#x2F;examples&quot;&gt;Examples&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;&#x2F;h2&gt;
&lt;p&gt;Find the full documentation. ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;ggrs&#x2F;newest&#x2F;ggrs&#x2F;&quot;&gt;Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bevy-plugin&quot;&gt;Bevy Plugin&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;&quot;&gt;Bevy engine&lt;&#x2F;a&gt; is a refreshingly simple data-driven game engine built in Rust, emplyoing the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Entity_component_system&quot;&gt;ECS paradigm&lt;&#x2F;a&gt;. It is free and Open Source!&lt;&#x2F;p&gt;
&lt;p&gt;The plugin is currently under development.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;bevy_ggrs&quot;&gt;Bevy_GGRS&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;wasm-support-through-webrtc-sockets&quot;&gt;WASM support through WebRTC sockets&lt;&#x2F;h2&gt;
&lt;p&gt;If you are interested to run a GGRS application in your browser, check the amazing Matchbox project! The repository includes a full running demo you can try right now.
The matchbox sockets are compatible with GGRS through a feature flag:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;johanhelsing&#x2F;matchbox&quot;&gt;Matchbox&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;godot-wrapper&quot;&gt;Godot Wrapper&lt;&#x2F;h2&gt;
&lt;p&gt;marcello505 is currently developing a wrapper for &lt;a href=&quot;https:&#x2F;&#x2F;godotengine.org&#x2F;&quot;&gt;Godot&lt;&#x2F;a&gt;. Find the repository here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;marcello505&#x2F;godot-ggrs-wrapper&quot;&gt;Godot GGRS Wrapper&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;&#x2F;h2&gt;
&lt;p&gt;Find out how to contribute. ðŸ‘‰&lt;a href=&quot;..&#x2F;..&#x2F;contributing&#x2F;how-to-contribute&#x2F;&quot;&gt;Contributing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;help&quot;&gt;Help&lt;&#x2F;h2&gt;
&lt;p&gt;See the FAQ. ðŸ‘‰&lt;a href=&quot;..&#x2F;..&#x2F;help&#x2F;faq&#x2F;&quot;&gt;Help&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Georg Schuppe</title>
		<published>2021-04-01T08:50:45+00:00</published>
		<updated>2021-04-01T08:50:45+00:00</updated>
		<link href="https://gschup.github.io/ggrs/authors/georg-schuppe/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/authors/georg-schuppe/</id>
		<content type="html">&lt;p&gt;Creator of &lt;strong&gt;GGRS&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I am a PhD student at the &lt;a href=&quot;https:&#x2F;&#x2F;www.kth.se&#x2F;&quot;&gt;KTH Royal Institute of Technology&lt;&#x2F;a&gt; in the &lt;a href=&quot;https:&#x2F;&#x2F;www.kth.se&#x2F;is&#x2F;rpl&quot;&gt;Division of Robotics, Perception and Learning&lt;&#x2F;a&gt; under supervision by &lt;a href=&quot;https:&#x2F;&#x2F;people.kth.se&#x2F;%7Etumova&#x2F;home.html&quot;&gt;Jana Tumova&lt;&#x2F;a&gt;. I am also an affiliated PhD student in the &lt;a href=&quot;https:&#x2F;&#x2F;wasp-sweden.org&#x2F;&quot;&gt;WASP program&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-research&quot;&gt;My Research&lt;&#x2F;h2&gt;
&lt;p&gt;I apply methods from &lt;em&gt;Formal Verification&lt;&#x2F;em&gt; to the domain of &lt;em&gt;Multi-Robot Systems&lt;&#x2F;em&gt; by synthesizing correct-by-design strategies over &lt;em&gt;Linear Time Logic&lt;&#x2F;em&gt; specifications in a scalable manner. Strategy negotation through assumption exchange between agents, but also between agents and humans are the overarching theme of my work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;private-interests&quot;&gt;Private Interests&lt;&#x2F;h2&gt;
&lt;p&gt;In my free time, I enjoy to play and study the game of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Go_(game)&quot;&gt;Go&lt;&#x2F;a&gt; and dabble in &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gschup.github.io&#x2F;&quot;&gt;Website&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&quot;&gt;Github&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;g_schup&quot;&gt;@g_schup&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Code of Conduct</title>
		<published>2021-04-01T08:50:45+00:00</published>
		<updated>2021-04-01T08:50:45+00:00</updated>
		<link href="https://gschup.github.io/ggrs/docs/contributing/code-of-conduct/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/docs/contributing/code-of-conduct/</id>
		<content type="html">&lt;h2 id=&quot;our-pledge&quot;&gt;Our Pledge&lt;&#x2F;h2&gt;
&lt;p&gt;We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, caste, color, religion, or sexual identity
and orientation.&lt;&#x2F;p&gt;
&lt;p&gt;We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-standards&quot;&gt;Our Standards&lt;&#x2F;h2&gt;
&lt;p&gt;Examples of behavior that contributes to a positive environment for our
community include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Demonstrating empathy and kindness toward other people&lt;&#x2F;li&gt;
&lt;li&gt;Being respectful of differing opinions, viewpoints, and experiences&lt;&#x2F;li&gt;
&lt;li&gt;Giving and gracefully accepting constructive feedback&lt;&#x2F;li&gt;
&lt;li&gt;Accepting responsibility and apologizing to those affected by our mistakes,
and learning from the experience&lt;&#x2F;li&gt;
&lt;li&gt;Focusing on what is best not just for us as individuals, but for the
overall community&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Examples of unacceptable behavior include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The use of sexualized language or imagery, and sexual attention or
advances of any kind&lt;&#x2F;li&gt;
&lt;li&gt;Trolling, insulting or derogatory comments, and personal or political attacks&lt;&#x2F;li&gt;
&lt;li&gt;Public or private harassment&lt;&#x2F;li&gt;
&lt;li&gt;Publishing others&#x27; private information, such as a physical or email
address, without their explicit permission&lt;&#x2F;li&gt;
&lt;li&gt;Other conduct which could reasonably be considered inappropriate in a
professional setting&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;enforcement-responsibilities&quot;&gt;Enforcement Responsibilities&lt;&#x2F;h2&gt;
&lt;p&gt;Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.&lt;&#x2F;p&gt;
&lt;p&gt;Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scope&quot;&gt;Scope&lt;&#x2F;h2&gt;
&lt;p&gt;This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enforcement&quot;&gt;Enforcement&lt;&#x2F;h2&gt;
&lt;p&gt;Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
&lt;a href=&quot;mailto:georg.schuppe@gmail.com&quot;&gt;georg.schuppe@gmail.com&lt;&#x2F;a&gt;.
All complaints will be reviewed and investigated promptly and fairly.&lt;&#x2F;p&gt;
&lt;p&gt;All community leaders are obligated to respect the privacy and security of the
reporter of any incident.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enforcement-guidelines&quot;&gt;Enforcement Guidelines&lt;&#x2F;h2&gt;
&lt;p&gt;Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-correction&quot;&gt;1. Correction&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Community Impact&lt;&#x2F;strong&gt;: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Consequence&lt;&#x2F;strong&gt;: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-warning&quot;&gt;2. Warning&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Community Impact&lt;&#x2F;strong&gt;: A violation through a single incident or series
of actions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Consequence&lt;&#x2F;strong&gt;: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-temporary-ban&quot;&gt;3. Temporary Ban&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Community Impact&lt;&#x2F;strong&gt;: A serious violation of community standards, including
sustained inappropriate behavior.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Consequence&lt;&#x2F;strong&gt;: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-permanent-ban&quot;&gt;4. Permanent Ban&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Community Impact&lt;&#x2F;strong&gt;: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Consequence&lt;&#x2F;strong&gt;: A permanent ban from any sort of public interaction within
the community.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;attribution&quot;&gt;Attribution&lt;&#x2F;h2&gt;
&lt;p&gt;This Code of Conduct is adapted from the &lt;a href=&quot;https:&#x2F;&#x2F;www.contributor-covenant.org&quot;&gt;Contributor Covenant&lt;&#x2F;a&gt;,
version 2.0, available at
&lt;a href=&quot;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;version&#x2F;2&#x2F;0&#x2F;code_of_conduct.html&quot;&gt;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;version&#x2F;2&#x2F;0&#x2F;code_of_conduct.html&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Community Impact Guidelines were inspired by
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;diversity&quot;&gt;Mozilla&#x27;s code of conduct enforcement ladder&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For answers to common questions about this code of conduct, see the FAQ at
&lt;a href=&quot;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;faq&quot;&gt;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;faq&lt;&#x2F;a&gt;. Translations are available
at &lt;a href=&quot;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;translations&quot;&gt;https:&#x2F;&#x2F;www.contributor-covenant.org&#x2F;translations&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How to Contribute</title>
		<published>2021-04-01T08:50:45+00:00</published>
		<updated>2021-04-01T08:50:45+00:00</updated>
		<link href="https://gschup.github.io/ggrs/docs/contributing/how-to-contribute/" type="text/html"/>
		<id>https://gschup.github.io/ggrs/docs/contributing/how-to-contribute/</id>
		<content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure to read the ðŸ‘‰&lt;a href=&quot;..&#x2F;code-of-conduct&#x2F;&quot;&gt;Code of Conduct&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The code can be found in the ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;ggrs&quot;&gt;GGRS repository&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you have a cool example or showcase of GGRS in use, let me know so your project can be highlighted!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;create-an-issue&quot;&gt;Create an issue&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;ggrs&#x2F;issues&#x2F;new?assignees=&amp;amp;labels=bug&amp;amp;template=bug_report.md&amp;amp;title=&quot;&gt;Bug report&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;ggrs&#x2F;issues&#x2F;new?assignees=&amp;amp;labels=enhancement&amp;amp;template=feature_request.md&amp;amp;title=&quot;&gt;Feature request&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;contribute-to-ggrs&quot;&gt;Contribute to GGRS&lt;&#x2F;h2&gt;
&lt;p&gt;Please send a ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gschup&#x2F;ggrs&#x2F;pull&#x2F;new&#x2F;main&quot;&gt;GitHub Pull Request&lt;&#x2F;a&gt; with a clear list of what you&#x27;ve done (read more about ðŸ‘‰&lt;a href=&quot;http:&#x2F;&#x2F;help.github.com&#x2F;pull-requests&#x2F;&quot;&gt;pull requests&lt;&#x2F;a&gt;). When you send a pull request, it would be great if you wrote unit- or integration tests for your changes. Please format your code via &lt;code&gt;cargo fmt&lt;&#x2F;code&gt; and make sure all of your commits are atomic (one feature per commit).&lt;&#x2F;p&gt;
&lt;p&gt;Always write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt;$ git commit -m &amp;quot;prefix: brief summary of the commit&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; A paragraph describing what changed and its impact.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the following prefixes commonly used:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feat&lt;&#x2F;code&gt;: for new features&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fix&lt;&#x2F;code&gt;: for fixing a bug&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;doc&lt;&#x2F;code&gt;: for adding&#x2F;changing documentation&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;test&lt;&#x2F;code&gt;: for adding&#x2F;changing tests&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;chore&lt;&#x2F;code&gt;: for any minor code cleanups&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;More about the ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;guides.github.com&#x2F;introduction&#x2F;flow&#x2F;&quot;&gt;GitHub flow&lt;&#x2F;a&gt;.
More about the ðŸ‘‰&lt;a href=&quot;https:&#x2F;&#x2F;www.conventionalcommits.org&#x2F;en&#x2F;v1.0.0&#x2F;&quot;&gt;Conventional Commits Specification&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
